# -*- coding: utf-8 -*-
"""BankNote-Authentication-ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TdUdBiPwhD1P_Q_rUTyZzO0BNaVNL4Pg

# **BankNote-Authentication-ANN: Create a program to build and train an Artificial Neural Network**

# **Created by: Preksha Shah**

# **Domain: Banking and Finance**

---

## **Problem Statement:**
 The task is to build an Artificial Neural Network (ANN) model to classify banknotes as genuine or forged based on features extracted from images of the banknotes

 ---

## **1. Loading and Preparing the Dataset**
### **1.1 Import necessary libraries**
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## **1.2 Load the dataset**"""

# Read the dataset into a pandas DataFrame
df = pd.read_csv("/content/BankNote_Authentication.csv")

"""##**2. Basic Data Exploration**
# **2.1 Basic data exploration**
"""

# Display the first 5 rows of the dataset
print(df.head())

# Display basic information about the dataset
print("\nDataset Info:")
print(df.info())

# Display summary statistics of the dataset
print("\nSummary Statistics:")
print(df.describe())

"""###**Inference:**

1. **Variance**:
   - The data shows a range of variance values with a mean close to zero.
   - There is notable variability in pixel intensity patterns across the dataset.

2. **Skewness**:
   - Skewness values indicate a slightly positive skew, with some data points having high positive skewness.

3. **Curtosis**:
   - Curtosis values vary widely, suggesting diverse distributions of pixel intensities in the images.

4. **Entropy**:
   - Entropy values are predominantly negative, indicating some level of order or predictability in pixel patterns.

5. **Class (Authenticity)**:
   - The dataset is fairly balanced between authentic (class 0) and counterfeit (class 1) banknotes, with a slight majority of authentic instances.

"""

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

"""##**3.1 Split the dataset**"""

# Split the data into features (X) and labels (y)
X = df.iloc[:, :-1].values  # All columns except the last one are features
y = df.iloc[:, -1].values   # The last column is the label

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""##**3.2 Standardize the data**"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""##**4. Build the Artificial Neural Network (ANN) model**"""

model = Sequential()
model.add(Dense(units=5, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(units=1, activation='sigmoid'))

"""##**5. Compile the model**"""

model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

"""##**6. Train the model**"""

history = model.fit(X_train, y_train, epochs=10, batch_size=10, validation_split=0.2)

"""### **Inference:**

1. **Loss and Accuracy Trends**:
   - **Loss**: The training loss decreases consistently from 0.7430 to 0.1983 over 10 epochs, indicating that the model is improving in minimizing prediction errors.
   - **Accuracy**: Training accuracy increases from 0.4869 to 0.9624, showing that the model's predictions on the training data are becoming more accurate with each epoch.

2. **Validation Performance**:
   - **Validation Loss**: Decreases steadily from 0.6678 to 0.1798, mirroring the training loss trend and indicating good generalization.
   - **Validation Accuracy**: Increases from 0.6045 to 0.9636, demonstrating that the model performs well on unseen validation data, aligning closely with training accuracy.

3. **Training Dynamics**:
   - The initial epochs show larger improvements in both training loss and accuracy, while the later epochs show more gradual improvements, typical in the refinement phase of model training.

4. **Convergence**:
   - Both training and validation accuracies converge towards high values, suggesting that the model effectively learns from the data and generalizes well to unseen samples.

##**7. Evaluate the model**
"""

test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {test_accuracy:.4f}')

"""### The model achieved a test accuracy of 96.00%, indicating strong performance on unseen data."""

# 8. Visualize the training process
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy over Epochs')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss over Epochs')
plt.legend()

plt.tight_layout()
plt.show()

"""### **Key Points:**
1. **Context and Problem Statement**:
   - Task: Classification of banknotes as genuine or forged based on image features.
   - Domain: Banking and finance, focusing on security and authenticity.

2. **Data Handling**:
   - Utilized pandas for data loading, exploration, and preprocessing.
   - Ensured data integrity through basic statistical summaries (head, info, describe).
   - Addressed missing values and standardized features using `StandardScaler`.

3. **Model Construction and Training**:
   - Built an Artificial Neural Network (ANN) with appropriate architecture (`Sequential` model).
   - Defined layers (`Dense`), activation functions (`relu`, `sigmoid`), and optimizer (`Adam`).
   - Trained the model over 10 epochs with batch processing, monitoring accuracy and loss.

4. **Performance Evaluation**:
   - Evaluated training dynamics through epoch-wise accuracy and loss plots.
   - Validated model generalization using validation data, observing alignment with training metrics.
   - Achieved a high test accuracy of 96.00%, indicating robust performance on unseen data.

5. **Visualization and Interpretation**:
   - Visualized training process with Matplotlib, displaying trends in accuracy and loss over epochs.
   - Extracted insights on model learning dynamics, guiding potential adjustments in model design and training strategy.

---   

**### Conclusion:**
- **Achievements**: Successfully implemented an ANN for banknote authentication, achieving strong test accuracy and demonstrating effective learning and generalization.
- **Insights Gained**: Understands the importance of data preprocessing, model architecture, and training dynamics in achieving reliable classification results.
- **Next Steps**: Consider further optimizing model performance through architecture refinement, regularization techniques, or exploring additional data features for enhanced classification accuracy.

This lab report showcases a structured approach to machine learning model development, highlighting proficiency in data handling, model construction, evaluation, and insightful interpretation of results.

---
---
"""